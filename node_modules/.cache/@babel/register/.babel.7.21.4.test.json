{"{\"assumptions\":{},\"sourceRoot\":\"/home/tselger-7050/Desktop/fcc/routes/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/home/tselger-7050/Desktop/fcc\",\"filename\":\"/home/tselger-7050/Desktop/fcc/routes/api.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"test\",\"root\":\"/home/tselger-7050/Desktop/fcc\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.21.4:test":{"value":{"code":"'use strict';\n\nconst SudokuSolver = require('../controllers/sudoku-solver.js');\nmodule.exports = function (app) {\n  // Get the sudoku solver.\n  let solver = new SudokuSolver();\n  app.route('/api/check').post((req, res) => {\n    // Inputs.\n    let puzzle = req.body.puzzle;\n    let coord = req.body.coordinate;\n    let val = req.body.value;\n\n    // Check input fields exist.\n    if (puzzle == undefined | coord == undefined | val == undefined) return res.json({\n      \"error\": \"Required field(s) missing\"\n    });\n\n    // Test the inputs are valid.\n    let reCoord = /^([A-Ia-i])([1-9])$/;\n    let reVal = /^[1-9]$/;\n    let rePuz = /[^1-9\\.]/;\n    if (!reCoord.test(coord)) return res.json({\n      \"error\": \"Invalid coordinate\"\n    });\n    if (!reVal.test(val)) return res.json({\n      \"error\": \"Invalid value\"\n    });\n    if (puzzle.length != 81) return res.json({\n      \"error\": \"Expected puzzle to be 81 characters long\"\n    });\n    if (rePuz.test(puzzle)) return res.json({\n      \"error\": \"Invalid characters in puzzle\"\n    });\n\n    // Get the coordinate representation of the row and column.\n    let [_, row, col] = coord.match(reCoord);\n\n    // Test the value is already in that coordinate of the puzzle.\n    if (solver.checkDuplicateValue(puzzle, row, col, val)) return res.json({\n      \"valid\": true\n    });\n\n    // Determine if the value violates the row, column, and region sudoku rules.\n    let validRow = solver.checkRowPlacement(puzzle, row, col, val);\n    let validCol = solver.checkColPlacement(puzzle, row, col, val);\n    let validReg = solver.checkRegionPlacement(puzzle, row, col, val);\n    if (validRow & validCol & validReg) return res.json({\n      \"valid\": true\n    });\n\n    // Determine the conflicts (if they exist).\n    let conflict = [];\n    if (!validRow) conflict.push(\"row\");\n    if (!validCol) conflict.push(\"column\");\n    if (!validReg) conflict.push(\"region\");\n    return res.json({\n      \"valid\": false,\n      conflict\n    });\n  });\n  app.route('/api/solve').post((req, res) => {\n    // Inputs.\n    let puzzle = req.body.puzzle;\n\n    // Error if no puzzle is defined.\n    if (puzzle == undefined) return res.json({\n      error: 'Required field missing'\n    });\n\n    // Error if the puzzle has too many characters.\n    if (puzzle.length != 81) return res.json({\n      \"error\": \"Expected puzzle to be 81 characters long\"\n    });\n\n    // Error if the puzzle contains invalid characters.\n    let rePuz = /[^1-9\\.]/;\n    if (rePuz.test(puzzle)) return res.json({\n      \"error\": \"Invalid characters in puzzle\"\n    });\n\n    // Try to solve the puzzle.\n    let puzzleArr = [...puzzle];\n    // Error if it does not solve.\n    if (!solver.solve(puzzleArr)) return res.json({\n      \"error\": \"Puzzle cannot be solved\"\n    });\n    // Return the solution.\n    return res.json({\n      \"solution\": puzzleArr.join(\"\")\n    });\n  });\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["SudokuSolver","require","module","exports","app","solver","route","post","req","res","puzzle","body","coord","coordinate","val","value","undefined","json","reCoord","reVal","rePuz","test","length","_","row","col","match","checkDuplicateValue","validRow","checkRowPlacement","validCol","checkColPlacement","validReg","checkRegionPlacement","conflict","push","error","puzzleArr","solve","join"],"sourceRoot":"/home/tselger-7050/Desktop/fcc/routes/","sources":["api.js"],"sourcesContent":["'use strict';\n\nconst SudokuSolver = require('../controllers/sudoku-solver.js');\n\nmodule.exports = function (app) {\n  \n  // Get the sudoku solver.\n  let solver = new SudokuSolver();\n\n  app.route('/api/check')\n    .post((req, res) => {\n\n      // Inputs.\n      let puzzle = req.body.puzzle;\n      let coord = req.body.coordinate;\n      let val = req.body.value;\n\n      // Check input fields exist.\n      if (puzzle==undefined | coord==undefined | val==undefined ) return res.json({ \"error\": \"Required field(s) missing\" });\n\n      // Test the inputs are valid.\n      let reCoord = /^([A-Ia-i])([1-9])$/;\n      let reVal = /^[1-9]$/;\n      let rePuz = /[^1-9\\.]/;\n      if (!reCoord.test(coord)) return res.json({ \"error\": \"Invalid coordinate\" });\n      if (!reVal.test(val)) return res.json({ \"error\": \"Invalid value\" });\n      if (puzzle.length != 81) return res.json({ \"error\": \"Expected puzzle to be 81 characters long\" });\n      if (rePuz.test(puzzle)) return res.json({ \"error\": \"Invalid characters in puzzle\" });\n      \n      // Get the coordinate representation of the row and column.\n      let [_, row, col] = coord.match(reCoord);\n      \n      // Test the value is already in that coordinate of the puzzle.\n      if (solver.checkDuplicateValue(puzzle,row ,col, val)) return res.json({ \"valid\": true });\n\n      // Determine if the value violates the row, column, and region sudoku rules.\n      let validRow = solver.checkRowPlacement(puzzle,row ,col, val);\n      let validCol = solver.checkColPlacement(puzzle, row, col, val);\n      let validReg = solver.checkRegionPlacement(puzzle, row ,col, val);\n      if (validRow & validCol & validReg) return res.json({ \"valid\": true });\n\n      // Determine the conflicts (if they exist).\n      let conflict = [];\n      if (!validRow) conflict.push(\"row\");\n      if (!validCol) conflict.push(\"column\");\n      if (!validReg) conflict.push(\"region\");\n\n      return res.json({ \"valid\": false, conflict });\n    });\n    \n  app.route('/api/solve')\n    .post((req, res) => {\n      // Inputs.\n      let puzzle = req.body.puzzle;\n\n      // Error if no puzzle is defined.\n      if (puzzle == undefined) return res.json({error: 'Required field missing'});\n      \n      // Error if the puzzle has too many characters.\n      if (puzzle.length != 81) return res.json({ \"error\": \"Expected puzzle to be 81 characters long\" });\n\n      // Error if the puzzle contains invalid characters.\n      let rePuz = /[^1-9\\.]/;\n      if (rePuz.test(puzzle)) return res.json({ \"error\": \"Invalid characters in puzzle\" });\n\n      // Try to solve the puzzle.\n      let puzzleArr = [...puzzle];\n      // Error if it does not solve.\n      if (!solver.solve(puzzleArr)) return res.json({ \"error\": \"Puzzle cannot be solved\" });\n      // Return the solution.\n      return res.json({ \"solution\":  puzzleArr.join(\"\")});\n    });\n};\n"],"mappings":"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"}},"mtime":1631298864000},"{\"assumptions\":{},\"sourceRoot\":\"/home/tselger-7050/Desktop/fcc/controllers/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/home/tselger-7050/Desktop/fcc\",\"filename\":\"/home/tselger-7050/Desktop/fcc/controllers/sudoku-solver.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"test\",\"root\":\"/home/tselger-7050/Desktop/fcc\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.21.4:test":{"value":{"code":"// Class that defines the related indexes for a cell index [0-80].\n// It can tell what the cells row indices, column indices, region indices, \n// adjacent rows indices (that are in the same region), adjacent \n// column indices (that are in the same region).\nclass Cell {\n  constructor(idx) {\n    //The index\n    this.idx = idx;\n\n    //The indices for the row that contain this cell.\n    let rowStart = Math.floor(idx / 9);\n    let incre = [0, 1, 2, 3, 4, 5, 6, 7, 8];\n    this.rowIdxs = incre.map(x => 9 * rowStart + x);\n\n    //The indices for the column that contain this cell.\n    let colStart = idx % 9;\n    this.colIdxs = incre.map(x => colStart + x * 9);\n\n    //The indices for the region that contain this cell.\n    let regStart = Math.floor(rowStart / 3) * 27 + Math.floor(colStart / 3) * 3;\n    this.regIdxs = incre.map(x => regStart + Math.floor(x / 3) * 9 + x % 3);\n\n    //The indices for the adjacent rows that are in this region.\n    let rowRegStart = 3 * Math.floor(rowStart / 3);\n    let next1Row = 9 * (rowRegStart + (rowStart + 1) % 3);\n    let next2Row = 9 * (rowRegStart + (rowStart + 2) % 3);\n    this.adjRegRowIdxs = [...incre.map(x => next1Row + x), ...incre.map(x => next2Row + x)];\n\n    //The indices for the adjacent columns that are in this region.\n    let colRegStart = 3 * Math.floor(colStart / 3);\n    let next1Col = colRegStart + (colStart + 1) % 3;\n    let next2Col = colRegStart + (colStart + 2) % 3;\n    this.adjRegColIdxs = [...incre.map(x => next1Col + x * 9), ...incre.map(x => next2Col + x * 9)];\n  }\n}\n\n// Class that generates all the cell values for all 80 cells.\nclass Indexer {\n  constructor() {\n    this.lookup = {};\n    for (let i = 0; i < 81; i++) {\n      this.lookup[i] = new Cell(i);\n    }\n  }\n}\n\n// Lookup for the row values to numbers [0-8].\nlet rowLookup = {\n  \"A\": 0,\n  \"B\": 1,\n  \"C\": 2,\n  \"D\": 3,\n  \"E\": 4,\n  \"F\": 5,\n  \"G\": 6,\n  \"H\": 7,\n  \"I\": 8,\n  \"a\": 0,\n  \"b\": 1,\n  \"c\": 2,\n  \"d\": 3,\n  \"e\": 4,\n  \"f\": 5,\n  \"g\": 6,\n  \"h\": 7,\n  \"i\": 8\n};\n\n// Lookup for the column values to numbers [0-8].\nlet colLookup = col => {\n  return col - 1;\n};\n\n// Maps the cell coordinates to a cell index [0-80].\nlet cellIdxMap = (row, col) => {\n  return 9 * rowLookup[row] + colLookup(col);\n};\n\n// Returns the substring of the puzzle that represents the rows.\nlet rowString = (puzzleString, cellIdx) => {\n  return indexer.lookup[cellIdx].rowIdxs.map(x => puzzleString[x]).join();\n};\n\n// Returns the substring of the puzzle that represents the columns.\nlet colString = (puzzleString, cellIdx) => {\n  return indexer.lookup[cellIdx].colIdxs.map(x => puzzleString[x]).join();\n};\n\n// Returns the substring of the puzzle that represents the region.\nlet regionString = (puzzleString, cellIdx) => {\n  return indexer.lookup[cellIdx].regIdxs.map(x => puzzleString[x]).join();\n};\n\n// Define the indexer to use in the Sudoku Solver.\nlet indexer = new Indexer();\n\n// Define the Sudoku solver.\nclass SudokuSolver {\n  // Checks if a puzzle's current inputs do not violate the rules of sudoku.\n  validate(puzzle) {\n    for (let cellIdx = 0; cellIdx < 80; cellIdx++) {\n      // If the cell has an entry.\n      if (puzzle[cellIdx] != \".\") {\n        // Get the value of the cell.\n        let k = puzzle[cellIdx];\n        // Create a trail puzzle and remove the current cell value.\n        let trailPuzzle = puzzle;\n        trailPuzzle[cellIdx] = \".\";\n        // Make a string of the puzzle.\n        let pString = trailPuzzle.join(\"\");\n        // Get the row.\n        let rString = rowString(pString, cellIdx);\n        // Get the column.\n        let cString = colString(pString, cellIdx);\n        // Get the region.\n        let reString = regionString(pString, cellIdx);\n        // Create the test regex from the cell value.\n        let re = new RegExp(k, \"g\");\n        // If the regex matches the current cell conflicts with the rules of sudoku.\n        if (re.test(rString + cString + reString)) {\n          return false;\n        }\n      }\n    }\n    // All cells passed.\n    return true;\n  }\n\n  // Checks the coordinate contains a duplicate value.\n  checkDuplicateValue(puzzleString, row, column, value) {\n    // Map the coordinates to the cell index.\n    let cellIdx = cellIdxMap(row, column);\n    return puzzleString[cellIdx] == value;\n  }\n  // Check proposed value does not violate the sudoku row rule.\n  checkRowPlacement(puzzleString, row, column, value) {\n    // Map the coordinates to the cell index.\n    let cellIdx = cellIdxMap(row, column);\n    // Get the puzzle substring that represents the cell's row.\n    let rString = rowString(puzzleString, cellIdx);\n    // Regex to check for the value in the row.\n    let re = new RegExp(value, \"g\");\n    return !re.test(rString);\n  }\n  // Check proposed value does not violate the sudoku column rule.\n  checkColPlacement(puzzleString, row, column, value) {\n    // Map the coordinates to the cell index.\n    let cellIdx = cellIdxMap(row, column);\n    // Get the puzzle substring that represents the cell's column.\n    let cString = colString(puzzleString, cellIdx);\n    // Regex to check for the value in the column.\n    let re = new RegExp(value, \"g\");\n    return !re.test(cString);\n  }\n  // Check proposed value does not violate the sudoku region rule.\n  checkRegionPlacement(puzzleString, row, column, value) {\n    // Map the coordinates to the cell index.\n    let cellIdx = cellIdxMap(row, column);\n    // Get the puzzle substring that represents the cell's region.\n    let reString = regionString(puzzleString, cellIdx);\n    // Regex to check for the value in the region.\n    let re = new RegExp(value, \"g\");\n    return !re.test(reString);\n  }\n  // Finds the values for a cell that do not violate the row, column and region rules of sudoku. Takes the coordinate.\n  findAllCellOptions(puzzleString, row, column) {\n    // Map the coordinates to the cell index.\n    let cellIdx = cellIdxMap(row, column);\n    return this.findAllCellOptionsByCellInd(puzzleString, cellIdx);\n  }\n\n  //Finds the values for a cell that do not violate the row, column and region rules of sudoku. Takes the cell index.\n  findAllCellOptionsByCellInd(puzzleString, cellIdx) {\n    // Get the puzzle substring that represents the cell's row.\n    let rString = rowString(puzzleString, cellIdx);\n    // Get the puzzle substring that represents the cell's column.\n    let cString = colString(puzzleString, cellIdx);\n    // Get the puzzle substring that represents the cell's region.\n    let reString = regionString(puzzleString, cellIdx);\n    // Regex of all the characters not in the rows, columns and regions.\n    let re = new RegExp(\"[^\" + rString + cString + reString + \"]\", \"g\");\n    // Match with all possible values [1-9] and returns an array of the missing entries.\n    return \"123456789\".match(re);\n  }\n\n  // A brute force algorithm.\n  solve(puzzle) {\n    // Loop over the indices.\n    for (let cellIdx = 0; cellIdx < 81; cellIdx++) {\n      // If the puzzles cell is not set.\n      if (puzzle[cellIdx] == \".\") {\n        // Make the puzzle a string for matching.\n        let pString = puzzle.join(\"\");\n        // Loop over all the possible cell options.\n        for (let k = 1; k < 10; k++) {\n          // Get the puzzle substring that represents the cell's row.\n          let rString = rowString(pString, cellIdx);\n          // Get the puzzle substring that represents the cell's column.\n          let cString = colString(pString, cellIdx);\n          // Get the puzzle substring that represents the cell's region.\n          let reString = regionString(pString, cellIdx);\n          // Test the guessed value to see if it violates the row, column and region rules of sudoku.\n          let re = new RegExp(k, \"g\");\n          if (!re.test(rString + cString + reString)) {\n            // Set the puzzle value.\n            puzzle[cellIdx] = k;\n            // Now solve the new puzzle.\n            if (this.solve(puzzle)) {\n              // Signals the sub puzzles found the solution.\n              return true;\n            }\n          }\n          puzzle[cellIdx] = \".\";\n        }\n        // If all possible guesses for this cell (along with its sub puzzles) did not work, return false.\n        return false;\n      }\n    }\n    // Signals the sub puzzles found the solution.\n    return true;\n  }\n}\nmodule.exports = SudokuSolver;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["Cell","constructor","idx","rowStart","Math","floor","incre","rowIdxs","map","x","colStart","colIdxs","regStart","regIdxs","rowRegStart","next1Row","next2Row","adjRegRowIdxs","colRegStart","next1Col","next2Col","adjRegColIdxs","Indexer","lookup","i","rowLookup","colLookup","col","cellIdxMap","row","rowString","puzzleString","cellIdx","indexer","join","colString","regionString","SudokuSolver","validate","puzzle","k","trailPuzzle","pString","rString","cString","reString","re","RegExp","test","checkDuplicateValue","column","value","checkRowPlacement","checkColPlacement","checkRegionPlacement","findAllCellOptions","findAllCellOptionsByCellInd","match","solve","module","exports"],"sourceRoot":"/home/tselger-7050/Desktop/fcc/controllers/","sources":["sudoku-solver.js"],"sourcesContent":["\n// Class that defines the related indexes for a cell index [0-80].\n// It can tell what the cells row indices, column indices, region indices, \n// adjacent rows indices (that are in the same region), adjacent \n// column indices (that are in the same region).\nclass Cell {\n  constructor(idx) {\n    //The index\n    this.idx = idx;\n\n    //The indices for the row that contain this cell.\n    let rowStart = Math.floor(idx/9);\n    let incre = [0,1,2,3,4,5,6,7,8];\n    this.rowIdxs = incre.map(x => 9*rowStart+x);\n\n    //The indices for the column that contain this cell.\n    let colStart = idx%9;\n    this.colIdxs = incre.map(x => colStart+x*9);\n\n    //The indices for the region that contain this cell.\n    let regStart = Math.floor(rowStart/3)*27 + Math.floor(colStart/3)*3;\n    this.regIdxs = incre.map(x => regStart+Math.floor(x/3)*9 + x%3);\n\n    //The indices for the adjacent rows that are in this region.\n    let rowRegStart = 3*Math.floor(rowStart/3);\n    let next1Row = 9*(rowRegStart + (rowStart+1)%3);\n    let next2Row = 9*(rowRegStart + (rowStart+2)%3);\n    this.adjRegRowIdxs = [...incre.map(x => next1Row+x) , ...incre.map(x => next2Row+x)];\n\n    //The indices for the adjacent columns that are in this region.\n    let colRegStart = 3*Math.floor(colStart/3);\n    let next1Col = colRegStart + (colStart+1)%3;\n    let next2Col = colRegStart + (colStart+2)%3;\n    this.adjRegColIdxs = [...incre.map(x => next1Col+x*9) , ...incre.map(x => next2Col+x*9)];\n  }\n}\n\n// Class that generates all the cell values for all 80 cells.\nclass Indexer {\n  constructor() {\n    this.lookup = {};\n    for (let i=0; i<81; i++) {\n       this.lookup[i] = new Cell(i);\n    }\n  }\n}\n\n// Lookup for the row values to numbers [0-8].\nlet rowLookup = {\n  \"A\":0, \"B\":1, \"C\":2, \n  \"D\":3, \"E\":4, \"F\":5, \n  \"G\":6, \"H\":7, \"I\":8,\n  \"a\":0, \"b\":1, \"c\":2,\n  \"d\":3, \"e\":4, \"f\":5, \n  \"g\":6, \"h\":7, \"i\":8\n}\n\n// Lookup for the column values to numbers [0-8].\nlet colLookup = (col) => {return col-1}\n\n// Maps the cell coordinates to a cell index [0-80].\nlet cellIdxMap = (row, col) => {\n  return 9*rowLookup[row] + colLookup(col)\n}\n\n// Returns the substring of the puzzle that represents the rows.\nlet rowString = (puzzleString, cellIdx) => {\n  return indexer.lookup[cellIdx].rowIdxs.map(x=>puzzleString[x]).join();\n}\n\n// Returns the substring of the puzzle that represents the columns.\nlet colString = (puzzleString, cellIdx) => {\n  return indexer.lookup[cellIdx].colIdxs.map(x=>puzzleString[x]).join();\n}\n\n// Returns the substring of the puzzle that represents the region.\nlet regionString = (puzzleString, cellIdx) => {\n  return indexer.lookup[cellIdx].regIdxs.map(x=>puzzleString[x]).join();\n}\n\n// Define the indexer to use in the Sudoku Solver.\nlet indexer = new Indexer();\n\n// Define the Sudoku solver.\nclass SudokuSolver {\n\n  // Checks if a puzzle's current inputs do not violate the rules of sudoku.\n  validate(puzzle) {\n    for (let cellIdx=0; cellIdx<80; cellIdx++) {\n      // If the cell has an entry.\n      if (puzzle[cellIdx] != \".\") {\n        // Get the value of the cell.\n        let k = puzzle[cellIdx];\n        // Create a trail puzzle and remove the current cell value.\n        let trailPuzzle = puzzle;\n        trailPuzzle[cellIdx] = \".\";\n        // Make a string of the puzzle.\n        let pString = trailPuzzle.join(\"\");\n        // Get the row.\n        let rString = rowString(pString, cellIdx);\n        // Get the column.\n        let cString = colString(pString, cellIdx);\n        // Get the region.\n        let reString = regionString(pString, cellIdx);\n        // Create the test regex from the cell value.\n        let re = new RegExp(k, \"g\");\n        // If the regex matches the current cell conflicts with the rules of sudoku.\n        if (re.test(rString+cString+reString)) {\n          return false;\n        }\n      }\n    }\n    // All cells passed.\n    return true;\n  }\n\n  // Checks the coordinate contains a duplicate value.\n  checkDuplicateValue(puzzleString, row, column, value) {\n    // Map the coordinates to the cell index.\n    let cellIdx = cellIdxMap(row,column);\n    return puzzleString[cellIdx] == value;\n  }\n  // Check proposed value does not violate the sudoku row rule.\n  checkRowPlacement(puzzleString, row, column, value) {\n    // Map the coordinates to the cell index.\n    let cellIdx = cellIdxMap(row,column);\n    // Get the puzzle substring that represents the cell's row.\n    let rString = rowString(puzzleString, cellIdx);\n    // Regex to check for the value in the row.\n    let re = new RegExp(value, \"g\");\n    return !re.test(rString);\n  }\n  // Check proposed value does not violate the sudoku column rule.\n  checkColPlacement(puzzleString, row, column, value) {\n    // Map the coordinates to the cell index.\n    let cellIdx = cellIdxMap(row,column);\n    // Get the puzzle substring that represents the cell's column.\n    let cString = colString(puzzleString, cellIdx);\n    // Regex to check for the value in the column.\n    let re = new RegExp(value, \"g\");\n    return !re.test(cString);\n  }\n  // Check proposed value does not violate the sudoku region rule.\n  checkRegionPlacement(puzzleString, row, column, value) {\n    // Map the coordinates to the cell index.\n    let cellIdx = cellIdxMap(row,column);\n    // Get the puzzle substring that represents the cell's region.\n    let reString = regionString(puzzleString, cellIdx);\n    // Regex to check for the value in the region.\n    let re = new RegExp(value, \"g\");\n    return !re.test(reString);\n  }\n  // Finds the values for a cell that do not violate the row, column and region rules of sudoku. Takes the coordinate.\n  findAllCellOptions(puzzleString, row, column ) {\n    // Map the coordinates to the cell index.\n    let cellIdx = cellIdxMap(row,column);\n    return this.findAllCellOptionsByCellInd(puzzleString, cellIdx);\n  }\n\n  //Finds the values for a cell that do not violate the row, column and region rules of sudoku. Takes the cell index.\n  findAllCellOptionsByCellInd(puzzleString, cellIdx) {\n    // Get the puzzle substring that represents the cell's row.\n    let rString = rowString(puzzleString, cellIdx);\n    // Get the puzzle substring that represents the cell's column.\n    let cString = colString(puzzleString, cellIdx);\n    // Get the puzzle substring that represents the cell's region.\n    let reString = regionString(puzzleString, cellIdx);\n    // Regex of all the characters not in the rows, columns and regions.\n    let re = new RegExp(\"[^\"+rString+cString+reString+\"]\", \"g\");\n    // Match with all possible values [1-9] and returns an array of the missing entries.\n    return (\"123456789\").match(re);\n  }\n\n  // A brute force algorithm.\n  solve(puzzle) {\n    // Loop over the indices.\n    for (let cellIdx=0; cellIdx<81; cellIdx++ ){\n      // If the puzzles cell is not set.\n      if (puzzle[cellIdx] == \".\") {\n        // Make the puzzle a string for matching.\n        let pString = puzzle.join(\"\");\n        // Loop over all the possible cell options.\n        for (let k=1; k<10; k++ ){\n          // Get the puzzle substring that represents the cell's row.\n          let rString = rowString(pString, cellIdx);\n          // Get the puzzle substring that represents the cell's column.\n          let cString = colString(pString, cellIdx);\n          // Get the puzzle substring that represents the cell's region.\n          let reString = regionString(pString, cellIdx);\n          // Test the guessed value to see if it violates the row, column and region rules of sudoku.\n          let re = new RegExp(k, \"g\");\n          if (!re.test(rString+cString+reString)) {\n            // Set the puzzle value.\n            puzzle[cellIdx] = k;\n            // Now solve the new puzzle.\n            if(this.solve(puzzle)) {\n              // Signals the sub puzzles found the solution.\n              return true;\n            }\n          }\n          puzzle[cellIdx] = \".\";\n        }\n        // If all possible guesses for this cell (along with its sub puzzles) did not work, return false.\n        return false;\n      }\n    }\n    // Signals the sub puzzles found the solution.\n    return true;\n  }\n}\n\nmodule.exports = SudokuSolver;"],"mappings":"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"}},"mtime":1631298864000}}